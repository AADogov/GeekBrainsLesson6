# 3. Есть два файла: в одном хранятся ФИО пользователей сайта, а в другом — данные об их хобби. Известно,
# что при хранении данных используется принцип: одна строка — один пользователь, разделитель между значениями —
# запятая. Написать код, загружающий данные из обоих файлов и формирующий из них словарь: ключи — ФИО, значения —
# данные о хобби. Сохранить словарь в файл. Проверить сохранённые данные. Если в файле, хранящем данные о хобби,
# меньше записей, чем в файле с ФИО, задаём в словаре значение None. Если наоборот — выходим из скрипта с кодом «1».
# При решении задачи считать, что объём данных в файлах во много раз меньше объема ОЗУ.
# ----------Решение-------------

# Создаем словарь result для вывода результатов
result = dict()
with open('users.csv', 'r', encoding='utf8') as f1, open('hobby.csv', 'r', encoding='utf8') as f2:
    # Открываем 2 файла сразу users.csv как f1 и hobby.csv как f2 с параметром read
    for line1 in f1:
        # проходим построчно первый файл с пользователями
        # в перменную key заносим значение строки с заменой '\n' на пустой символ и ',' на пробел
        key = line1.replace('\n', '').replace(',', ' ')
        # в перменную value заносим значение строки с заменой '\n' на пустой символ
        value = f2.readline().replace('\n', '')
        if value == '':
            # если value пустая строка и файл кончился то value приравниваем None
            value = None
        # добаляеем в словарь по ключу key и значение value
        result[key] = value
    if f2.readline() != '':
        # Проверяем если в файле hobby.csv остались еще строки, после того как мы прошли весь файл users.csv, то
        # выводим результат и завершаем программу с кодом 1
        print(result)
        exit(1)
# выводим результат
print(result)



